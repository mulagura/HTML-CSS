Here is a list of popular browsers and their corresponding CSS prefixes for cross-compatibility:

1. Mozilla Firefox (Gecko engine): 
   - Prefix: `-moz-`

2. Google Chrome (Blink engine):
   - Prefix: `-webkit-`

3. Safari (Blink engine):
   - Prefix: `-webkit-`

4. Microsoft Edge (Chromium engine):
   - Prefix: `-webkit-` (for backward compatibility) and `-ms-`

5. Opera (Blink engine):
   - Prefix: `-webkit-` 
It is generally discouraged to directly reference the DOM as different browsers return different objects when you reference elements in the DOM. If you're using Angular, make sure to use "@angular/platform-browser": "<ANGULAR_VERSION>", "@angular/platform-browser-dynamic": "<ANGULAR_VERSION>", and as always, make sure the versions of those dependencies match the versions of the rest of your @angular dependencies. It's also worth looking into Angular Polyfills, as they can help you support some browsers that are trickier than other. Always remember to test your code on different browsers frequently.

If you're using NPM, I would look into using the scss-bundle dependency. If you're also using webpack, you should also be able to easily import styles from frameworks like bootstrap, i.e. @import "~bootstrap/scss/bootstrap";. All you need to do is make sure you have the bootstrap dependency installed in NPM. In general, Frameworks already consider cross browser support (among other things like accessibility and responsiveness) when they generate their style.

This really depends on what browsers you are targeting. There is no magic bullet for Cross Browser compatibility. 
You can use browserstack to see how your site looks in many different browsers.
You can also use Chrome dev tools and choose emulation to see what it looks like on certain phones. 
Keep in mind, React typically is written in ES6 syntax and uses Babel to transpile it to ES5 code, which allows modern browsers to interpret. SASS converts code to plain css, so your browser compatibility depends on the properties used. For that you can use caniuse.com
https://caniuse.com/

It's important to note that CSS prefixes are used to provide experimental 
or non-standard CSS features that are not yet fully supported by all browsers. 
However, with the advancements in browser technology, the need for using prefixes has decreased significantly. 
It is generally recommended to use vendor prefixes sparingly and check for standard CSS support across browsers.


